#!/usr/bin/env python3
import nmap
import requests
import paramiko
import socket
import sys
import warnings
import logging
from requests.auth import HTTPBasicAuth

warnings.filterwarnings('ignore')
logging.getLogger('paramiko').setLevel(logging.CRITICAL)

def scan_ports():
    try:
        nm = nmap.PortScanner()
        nm.scan('127.0.0.1', '1-8999', arguments='-sT')

        open_ports = []
        if '127.0.0.1' in nm.all_hosts():
            for proto in nm['127.0.0.1'].all_protocols():
                ports = nm['127.0.0.1'][proto].keys()
                for port in ports:
                    if nm['127.0.0.1'][proto][port]['state'] == 'open':
                        open_ports.append(port)

        return sorted(open_ports)
    except Exception:
        return []

def try_http(port, username, password):
    try:
        url = f'http://127.0.0.1:{port}'
        response = requests.get(url, auth=HTTPBasicAuth(username, password), timeout=5)
        if response.status_code == 200:
            output = response.text.strip()
            print(f'http://{username}:{password}@127.0.0.1:{port} {output}')
            return True
    except Exception:
        pass

    return False

def try_ssh(port, username, password):
    client = None
    try:
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect('127.0.0.1', port=port, username=username, password=password, timeout=10, look_for_keys=False, allow_agent=False, banner_timeout=10)

        transport = client.get_transport()
        channel = transport.open_session()
        channel.settimeout(5)

        output = ''
        while True:
            if channel.recv_ready():
                data = channel.recv(1024)
                if not data:
                    break
                output += data.decode('utf-8', errors='ignore')
            else:
                break

        output = output.strip()
        if output:
            print(f'ssh://{username}:{password}@127.0.0.1:{port} {output}')
        return True
    except Exception:
        pass
    finally:
        if client:
            try:
                client.close()
            except Exception:
                pass

    return False

def main():
    open_ports = scan_ports()

    for port in open_ports:
        for username, password in [('admin', 'admin'), ('root', 'abc123'), ('skroob', '12345')]:
            try_http(port, username, password)
            try_ssh(port, username, password)

if __name__ == '__main__':
    main()
